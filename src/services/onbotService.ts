// src/services/onbotService.ts
// ‚úÖ VERS√ÉO 8.0 - CONEX√ÉO DIN√ÇMICA EM TEMPO REAL COM n8n

// ==================== CONFIGURA√á√ïES ====================
const CONFIG = {
  CHAT_WEBHOOK_URL: 'https://consentient-bridger-pyroclastic.ngrok-free.dev/webhook/a3edf1eb-7b77-4835-a685-1c937fc2957b/chat',
  JWT_TOKEN: import.meta.env.VITE_JWT_TOKEN || 'default-token',
  TIMEOUT: 30000,
  RETRY_ATTEMPTS: 2
} as const;

// ==================== TIPOS ====================
interface EmpresaSelection {
  numero: number;
  nome: string;
  id: string;
}

interface WebhookPayload {
  sessionId: string;
  chatInput: string;
  action: string;
  timestamp: string;
  token: string;
  empresa?: string;
  processType?: string;
  dadosUsuarios?: string;
  isEmpresaSelection?: boolean;
  selectedEmpresa?: string;
  isPlanilha?: boolean;
  planilhaData?: string[][];
}

interface ApiResponse {
  success: boolean;
  output?: string;
  response?: string;
  message?: string;
  error?: string;
  usuarios_processados?: number;
  usuarios_criados?: number;
}

// ==================== VALIDA√á√ÉO DIN√ÇMICA n8n ====================

/**
 * üîç VALIDAR SE n8n EST√Å RETORNANDO JSON V√ÅLIDO
 */
const validateN8nResponse = async (): Promise<void> => {
  const testPayload = {
    sessionId: "health_check_dynamic",
    chatInput: "health_check",
    action: "health_check",
    timestamp: new Date().toISOString(),
    token: "health_check_token"
  };

  try {
    console.log('üîç Validando conex√£o din√¢mica com n8n...');
    
    const response = await fetch(CONFIG.CHAT_WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testPayload)
    });

    if (!response.ok) {
      throw new Error(`n8n retornou HTTP ${response.status}`);
    }

    const responseText = await response.text();
    console.log('üì® Resposta de valida√ß√£o n8n:', responseText.substring(0, 200));

    // ‚úÖ EXIGIR JSON V√ÅLIDO
    try {
      const data = JSON.parse(responseText);
      
      if (typeof data !== 'object' || data === null) {
        throw new Error('Resposta n8n n√£o √© um objeto JSON');
      }
      
      console.log('‚úÖ n8n configurado corretamente - retorna JSON v√°lido');
    } catch (jsonError) {
      throw new Error(`n8n n√£o retorna JSON v√°lido: ${jsonError instanceof Error ? jsonError.message : 'Erro de parse'}`);
    }

  } catch (error) {
    console.error('‚ùå Valida√ß√£o n8n falhou:', error);
    throw new Error(`Configura√ß√£o n8n incorreta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
};

// ==================== FUN√á√ïES PRINCIPAIS ====================

/**
 * üéØ ENVIA DADOS DESESTRUTURADOS PARA PROCESSAMENTO DIN√ÇMICO
 */
export const sendMessageToOnbot = async (
  message: string, 
  sessionId: string
): Promise<string> => {
  try {
    console.log('üí¨ Processando dados dinamicamente...', { 
      message: message?.substring(0, 100) || '(vazio)',
      sessionId 
    });

    if (!message?.trim()) {
      throw new Error('Forne√ßa os dados dos usu√°rios para cria√ß√£o');
    }

    // üéØ DETECTAR SE √â SELE√á√ÉO DE EMPRESA
    const empresaSelection = detectEmpresaSelection(message);
    if (empresaSelection) {
      console.log('üè¢ Sele√ß√£o de empresa detectada:', empresaSelection);
      
      const payload: WebhookPayload = {
        sessionId,
        chatInput: `Selecionar empresa: ${empresaSelection.numero} - ${empresaSelection.nome}`,
        action: 'select_empresa',
        timestamp: new Date().toISOString(),
        token: generateToken(),
        empresa: empresaSelection.nome,
        isEmpresaSelection: true,
        selectedEmpresa: empresaSelection.nome
      };

      const response = await makeSecureRequest(payload);
      return await parseN8nResponse(response);
    }

    // üéØ PROCESSAMENTO DIN√ÇMICO DE DADOS
    console.log('üîç Analisando dados dinamicamente para m√∫ltiplos usu√°rios...');
    
    const payload: WebhookPayload = {
      sessionId,
      chatInput: message.trim(),
      action: 'processar_dados_desestruturados',
      timestamp: new Date().toISOString(),
      token: generateToken(),
      dadosUsuarios: message.trim(),
      processType: 'criacao_multipla_usuarios'
    };

    const response = await makeSecureRequest(payload);
    return await parseN8nResponse(response);

  } catch (error) {
    console.error('‚ùå Erro no processamento din√¢mico:', error);
    return handleDynamicError(error);
  }
};

/**
 * üìä PROCESSAR PLANILHA DINAMICAMENTE
 */
export const processPlanilha = async (
  dadosPlanilha: string[][],
  sessionId: string,
  empresaSelecionada?: string
): Promise<string> => {
  try {
    console.log('üìä Processando planilha dinamicamente...', { 
      linhas: dadosPlanilha.length,
      empresa: empresaSelecionada,
      sessionId
    });

    if (!dadosPlanilha || dadosPlanilha.length === 0) {
      throw new Error('Planilha vazia ou sem dados');
    }

    // Converter planilha para formato process√°vel
    const textoPlanilha = convertPlanilhaParaTexto(dadosPlanilha);
    
    const payload: WebhookPayload = {
      sessionId,
      chatInput: textoPlanilha,
      action: 'processar_planilha',
      timestamp: new Date().toISOString(),
      token: generateToken(),
      empresa: empresaSelecionada,
      processType: 'planilha_csv',
      isPlanilha: true,
      planilhaData: dadosPlanilha,
      dadosUsuarios: textoPlanilha
    };

    console.log('üìã Dados da planilha convertidos dinamicamente:', textoPlanilha.substring(0, 200) + '...');

    const response = await makeSecureRequest(payload);
    return await parseN8nResponse(response);

  } catch (error) {
    console.error('‚ùå Erro ao processar planilha dinamicamente:', error);
    return handleDynamicError(error);
  }
};

/**
 * üìù PROCESSAR DADOS DE TEXTO DINAMICAMENTE
 */
export const processTextData = async (
  texto: string,
  sessionId: string,
  formato: 'csv' | 'json' | 'texto_livre' = 'texto_livre',
  empresaSelecionada?: string
): Promise<string> => {
  try {
    console.log('üìù Processando dados textuais dinamicamente...', { 
      formato,
      sessionId,
      tamanho: texto.length 
    });

    const payload: WebhookPayload = {
      sessionId,
      chatInput: texto.trim(),
      action: 'processar_dados_texto',
      timestamp: new Date().toISOString(),
      token: generateToken(),
      empresa: empresaSelecionada,
      processType: formato,
      dadosUsuarios: texto.trim()
    };

    const response = await makeSecureRequest(payload);
    return await parseN8nResponse(response);

  } catch (error) {
    console.error('‚ùå Erro ao processar texto dinamicamente:', error);
    return handleDynamicError(error);
  }
};

// ==================== UTILIT√ÅRIOS DIN√ÇMICOS ====================

/**
 * üîÑ CONVERTER PLANILHA PARA TEXTO PROCESS√ÅVEL
 */
const convertPlanilhaParaTexto = (dadosPlanilha: string[][]): string => {
  const linhasDados = dadosPlanilha.length > 1 ? dadosPlanilha.slice(1) : dadosPlanilha;
  
  const linhasTexto = linhasDados.map(linha => {
    return linha.filter(cell => cell && cell.trim().length > 0).join(', ');
  });

  return linhasTexto.join('\n');
};

/**
 * üè¢ DETECTAR SELE√á√ÉO DE EMPRESA
 */
const detectEmpresaSelection = (message: string): EmpresaSelection | null => {
  const cleanMessage = message.trim();
  
  const empresas = [
    { numero: 1, nome: 'Onboarding', id: 'onboarding' },
    { numero: 2, nome: 'Onboarding | Joinville', id: 'onboarding-joinville' },
    { numero: 3, nome: 'Onboarding | Olha o Mist√©rio', id: 'onboarding-olha-o-misterio' }
  ];

  const selected = empresas.find(emp => emp.numero.toString() === cleanMessage);
  return selected || null;
};

const generateToken = (): string => {
  return `token_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`;
};

const generateSessionId = (): string => {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

/**
 * üåê REQUISI√á√ÉO SEGURA DIN√ÇMICA
 */
const makeSecureRequest = async (payload: WebhookPayload): Promise<Response> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), CONFIG.TIMEOUT);

  try {
    console.log('üåê Enviando dinamicamente para n8n...', { 
      action: payload.action,
      sessionId: payload.sessionId,
      hasData: !!payload.dadosUsuarios 
    });
    
    const response = await fetch(CONFIG.CHAT_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${CONFIG.JWT_TOKEN}`,
      },
      body: JSON.stringify(payload),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`n8n retornou HTTP ${response.status}: ${response.statusText}`);
    }

    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

/**
 * üìã PARSE DIN√ÇMICO DA RESPOSTA n8n - SEM FALLBACK
 */
const parseN8nResponse = async (response: Response): Promise<string> => {
  const responseText = await response.text();
  
  console.log('üì® Resposta din√¢mica do n8n:', {
    tamanho: responseText.length,
    preview: responseText.substring(0, 200),
    isJson: isJsonString(responseText)
  });

  // ‚úÖ VALIDA√á√ÉO ESTRITA - EXIGIR JSON V√ÅLIDO
  if (!responseText.trim()) {
    throw new Error('n8n retornou resposta vazia');
  }

  if (!isJsonString(responseText)) {
    throw new Error('n8n n√£o retornou JSON v√°lido. Verifique a configura√ß√£o do workflow.');
  }

  try {
    const data: ApiResponse = JSON.parse(responseText);
    
    // ‚úÖ PROPAGAR ERROS ESPEC√çFICOS DO n8n
    if (data.error) {
      throw new Error(`n8n: ${data.error}`);
    }

    if (!data.success && !data.output && !data.response && !data.message) {
      throw new Error('n8n retornou estrutura JSON inv√°lida');
    }

    // ‚úÖ RETORNAR RESPOSTAS DIN√ÇMICAS DO n8n
    if (data.output) return data.output;
    if (data.response) return data.response;
    if (data.message) return data.message;
    
    if (data.usuarios_processados !== undefined) {
      return `‚úÖ Processados ${data.usuarios_processados} usu√°rios dinamicamente`;
    }
    
    if (data.success) return '‚úÖ Processamento din√¢mico conclu√≠do';
    
    throw new Error('n8n retornou resposta sem dados process√°veis');

  } catch (error) {
    console.error('‚ùå Erro no parse din√¢mico:', error);
    
    if (error instanceof Error) {
      // Manter erros espec√≠ficos do n8n
      if (error.message.includes('n8n')) {
        throw error;
      }
      throw new Error(`Erro de comunica√ß√£o com n8n: ${error.message}`);
    }
    
    throw new Error('Erro desconhecido na comunica√ß√£o com n8n');
  }
};

/**
 * üîç VALIDAR SE STRING √â JSON V√ÅLIDO
 */
const isJsonString = (str: string): boolean => {
  try {
    JSON.parse(str);
    return true;
  } catch {
    return false;
  }
};

/**
 * üõë TRATAMENTO DIN√ÇMICO DE ERROS
 */
const handleDynamicError = (error: any): string => {
  console.error('‚ùå Erro din√¢mico detalhado:', error);

  // ‚úÖ ERROS ESPEC√çFICOS DO n8n
  if (error instanceof Error) {
    if (error.message.includes('n8n')) {
      return `üîß ${error.message}`;
    }
    
    if (error.message.includes('JSON') || error.message.includes('parse')) {
      return 'üîß n8n configurado incorretamente - deve retornar JSON v√°lido';
    }
    
    if (error.message.includes('HTTP')) {
      return `üåê Erro n8n: ${error.message}`;
    }
    
    if (error.name === 'AbortError') {
      return '‚è∞ n8n n√£o respondeu a tempo';
    }
    
    if (error.message.includes('Failed to fetch')) {
      return 'üåê n8n indispon√≠vel - verifique a conex√£o';
    }
    
    return `‚ùå ${error.message}`;
  }

  return `‚ùå Erro inesperado: ${String(error)}`;
};

// ==================== SERVI√áOS ADICIONAIS DIN√ÇMICOS ====================

export const testConnection = async (): Promise<{ 
  status: 'success' | 'error';
  message: string;
  timestamp: string;
}> => {
  try {
    // ‚úÖ VALIDAR CONEX√ÉO DIN√ÇMICA PRIMEIRO
    await validateN8nResponse();
    
    const payload: WebhookPayload = {
      sessionId: generateSessionId(),
      chatInput: 'health_check_dynamic',
      action: 'health_check', 
      timestamp: new Date().toISOString(),
      token: generateToken()
    };

    const response = await makeSecureRequest(payload);
    const data = await response.json();

    return {
      status: 'success',
      message: '‚úÖ Conex√£o din√¢mica com n8n estabelecida!',
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    return {
      status: 'error', 
      message: `‚ùå Falha na conex√£o din√¢mica: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
      timestamp: new Date().toISOString()
    };
  }
};

export const getServiceConfig = () => {
  return {
    version: '8.0.0',
    description: 'Conex√£o din√¢mica em tempo real com n8n',
    capabilities: [
      'üîó Conex√£o din√¢mica em tempo real com n8n',
      'üìä Processamento de planilhas CSV/Excel',
      'üí¨ Dados desestruturados em texto livre',
      'üë• Cria√ß√£o m√∫ltipla de usu√°rios',
      'üè¢ Integra√ß√£o com empresa selecionada',
      'üîÑ Convers√£o autom√°tica de formatos',
      'üîç Valida√ß√£o estrita de JSON'
    ]
  };
};

// ==================== COMPATIBILIDADE ====================

export const processCSVFile = processPlanilha;
export const testOnbotConnection = testConnection;

// ==================== INICIALIZA√á√ÉO DIN√ÇMICA ====================

// ‚úÖ VALIDAR CONEX√ÉO NA INICIALIZA√á√ÉO
console.log(`
üöÄ Onbot Service 8.0.0 - CONEX√ÉO DIN√ÇMICA n8n

üéØ CAPACIDADES DIN√ÇMICAS:
üîó Conex√£o em tempo real com n8n
üìä Processamento din√¢mico de planilhas  
üí¨ Dados desestruturados din√¢micos
üë• Cria√ß√£o m√∫ltipla din√¢mica de usu√°rios
üè¢ Integra√ß√£o din√¢mica com empresa
üîÑ Convers√£o autom√°tica din√¢mica
üîç Valida√ß√£o estrita de JSON

üìç URL: ${CONFIG.CHAT_WEBHOOK_URL}
‚úÖ Conectando dinamicamente com n8n...
`);

// Exporta√ß√µes
export { generateSessionId as SessionManager };
export type { EmpresaSelection, WebhookPayload, ApiResponse };