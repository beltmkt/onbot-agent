// src/services/onbotService.ts
// ‚úÖ VERS√ÉO 11.0 - COMPLETA E CORRIGIDA

// ==================== CONFIGURA√á√ïES ====================
const CONFIG = {
  CHAT_WEBHOOK_URL: 'https://consentient-bridger-pyroclastic.ngrok-free.dev/webhook/a3edf1eb-7b77-4835-a685-1c937fc2957b/chat',
  JWT_TOKEN: import.meta.env.VITE_JWT_TOKEN || 'default-token',
  TIMEOUT: 45000, // Aumentado para 45 segundos
  RETRY_ATTEMPTS: 3,
  MAX_RETRY_DELAY: 30000 // 30 segundos m√°ximo
} as const;

// ==================== TIPOS ====================
interface WebhookPayload {
  sessionId: string;
  chatInput: string;
  action: string;
  timestamp: string;
  token: string;
  empresa?: string;
  processType?: string;
  dadosUsuarios?: string;
  isPlanilha?: boolean;
  planilhaData?: string[][];
}

interface ApiResponse {
  success: boolean;
  output?: string;
  response?: string;
  message?: string;
  error?: string;
  usuarios_processados?: number;
  usuarios_criados?: number;
}

// ==================== VALIDA√á√ÉO DIN√ÇMICA n8n ====================

/**
 * üîç VALIDAR SE n8n EST√Å RETORNANDO JSON V√ÅLIDO
 */
const validateN8nResponse = async (): Promise<void> => {
  const testPayload = {
    sessionId: "health_check",
    chatInput: "health_check",
    action: "health_check",
    timestamp: new Date().toISOString(),
    token: "health_check_token"
  };

  try {
    console.log('üîç Validando conex√£o com n8n...');
    
    const response = await fetch(CONFIG.CHAT_WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testPayload)
    });

    if (!response.ok) {
      throw new Error(`n8n retornou HTTP ${response.status}`);
    }

    const responseText = await response.text();
    console.log('üì® Resposta de valida√ß√£o n8n:', responseText.substring(0, 200));

    // ‚úÖ EXIGIR JSON V√ÅLIDO
    try {
      const data = JSON.parse(responseText);
      
      if (typeof data !== 'object' || data === null) {
        throw new Error('Resposta n8n n√£o √© um objeto JSON');
      }
      
      console.log('‚úÖ n8n configurado corretamente - retorna JSON v√°lido');
    } catch (jsonError) {
      throw new Error(`n8n n√£o retorna JSON v√°lido: ${jsonError instanceof Error ? jsonError.message : 'Erro de parse'}`);
    }

  } catch (error) {
    console.error('‚ùå Valida√ß√£o n8n falhou:', error);
    throw new Error(`Configura√ß√£o n8n incorreta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
};

// ==================== FUN√á√ïES PRINCIPAIS ====================

/**
 * üéØ ENVIAR MENSAGEM PARA PROCESSAMENTO NO n8n
 */
export const sendMessageToOnbot = async (
  message: string, 
  sessionId: string
): Promise<string> => {
  try {
    console.log('üí¨ Enviando mensagem para n8n...', { 
      message: message?.substring(0, 100) || '(vazio)',
      sessionId 
    });

    if (!message?.trim()) {
      throw new Error('Digite uma mensagem para continuar');
    }

    // üéØ DETECTAR TIPO DE MENSAGEM E CRIAR PAYLOAD
    const payload = createPayloadByMessageType(message, sessionId);
    
    // üêõ DEBUG DO PAYLOAD
    debugPayloadToN8n(payload);
    
    const response = await makeSecureRequestWithRetry(payload);
    return await parseN8nResponse(response);

  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem:', error);
    return handleDynamicError(error);
  }
};

/**
 * üéØ CRIAR PAYLOAD POR TIPO DE MENSAGEM - SCHEMA CORRIGIDO
 */
const createPayloadByMessageType = (message: string, sessionId: string): WebhookPayload => {
  const cleanMessage = message.trim();
  
  // üéØ FORMATO SIMPLIFICADO E PADRONIZADO
  const basePayload = {
    sessionId,
    chatInput: cleanMessage,
    timestamp: new Date().toISOString(),
    token: generateToken()
  };

  // üè¢ DETECTAR SELE√á√ÉO DE EMPRESA (1, 2, 3...)
  const empresaMatch = cleanMessage.match(/^\d+$/);
  if (empresaMatch) {
    console.log('üè¢ N√∫mero de empresa detectado:', cleanMessage);
    return {
      ...basePayload,
      action: 'selecionar_empresa',
      empresa: cleanMessage
    };
  }

  // üîë DETECTAR TOKEN (40+ caracteres hex)
  const tokenMatch = cleanMessage.match(/^[a-fA-F0-9]{40,}$/);
  if (tokenMatch) {
    console.log('üîë Token detectado:', cleanMessage.substring(0, 20) + '...');
    return {
      ...basePayload,
      action: 'validar_token'
    };
  }

  // üìä DETECTAR DADOS DE USU√ÅRIOS (cont√©m email e/ou telefone)
  const hasUserData = cleanMessage.includes('@') || /\d{10,}/.test(cleanMessage);
  if (hasUserData) {
    console.log('üë§ Dados de usu√°rios detectados');
    return {
      ...basePayload,
      action: 'processar_usuarios',
      dadosUsuarios: cleanMessage,
      processType: 'dados_usuarios'
    };
  }

  // üí¨ MENSAGEM GEN√âRICA - SCHEMA SIMPLIFICADO
  console.log('üí¨ Mensagem gen√©rica detectada');
  return {
    ...basePayload,
    action: 'processar_mensagem'
  };
};

/**
 * üß™ PAYLOAD M√çNIMO PARA TESTE DE SCHEMA
 */
const createMinimalPayload = (message: string, sessionId: string): WebhookPayload => {
  return {
    sessionId,
    chatInput: message.trim(),
    action: 'chat',
    timestamp: new Date().toISOString(),
    token: generateToken()
  };
};

/**
 * üìä PROCESSAR PLANILHA
 */
export const processPlanilha = async (
  dadosPlanilha: string[][],
  sessionId: string,
  empresaSelecionada?: string
): Promise<string> => {
  try {
    console.log('üìä Processando planilha...', { 
      linhas: dadosPlanilha.length,
      sessionId 
    });

    if (!dadosPlanilha || dadosPlanilha.length === 0) {
      throw new Error('Planilha vazia ou sem dados');
    }

    // Converter planilha para texto
    const textoPlanilha = convertPlanilhaParaTexto(dadosPlanilha);
    
    const payload: WebhookPayload = {
      sessionId,
      chatInput: textoPlanilha,
      action: 'processar_planilha',
      timestamp: new Date().toISOString(),
      token: generateToken(),
      empresa: empresaSelecionada,
      processType: 'planilha_csv',
      isPlanilha: true,
      planilhaData: dadosPlanilha,
      dadosUsuarios: textoPlanilha
    };

    // üêõ DEBUG DO PAYLOAD
    debugPayloadToN8n(payload);
    
    const response = await makeSecureRequestWithRetry(payload);
    return await parseN8nResponse(response);

  } catch (error) {
    console.error('‚ùå Erro ao processar planilha:', error);
    return handleDynamicError(error);
  }
};

// ==================== UTILIT√ÅRIOS ====================

/**
 * üêõ DEBUG - VERIFICAR ENVIO PARA n8n
 */
const debugPayloadToN8n = (payload: WebhookPayload): void => {
  console.log('üì§ DEBUG - ENVIANDO PARA n8n:', {
    '‚úÖ sessionId': payload.sessionId,
    '‚úÖ chatInput': payload.chatInput?.substring(0, 150) + '...',
    '‚úÖ action': payload.action,
    'üè¢ empresa': payload.empresa || 'N√£o enviada',
    'üìä processType': payload.processType || 'N√£o especificado',
    'üîë token': payload.token?.substring(0, 20) + '...',
    'üì¶ dadosUsuarios': payload.dadosUsuarios ? 'Presente' : 'Ausente',
    'üìã planilhaData': payload.planilhaData ? `${payload.planilhaData.length} linhas` : 'N√£o'
  });
};

/**
 * üîÑ CONVERTER PLANILHA PARA TEXTO
 */
const convertPlanilhaParaTexto = (dadosPlanilha: string[][]): string => {
  const linhasDados = dadosPlanilha.length > 1 ? dadosPlanilha.slice(1) : dadosPlanilha;
  
  const linhasTexto = linhasDados.map(linha => {
    return linha.filter(cell => cell && cell.trim().length > 0).join(', ');
  });

  return linhasTexto.join('\n');
};

const generateToken = (): string => {
  return `token_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`;
};

const generateSessionId = (): string => {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

/**
 * üåê REQUISI√á√ÉO SEGURA - COM MELHOR DIAGN√ìSTICO DE ERRO
 */
const makeSecureRequest = async (payload: WebhookPayload): Promise<Response> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => {
    console.warn('‚è∞ Timeout atingido - abortando requisi√ß√£o');
    controller.abort();
  }, CONFIG.TIMEOUT);

  try {
    console.log('üåê Enviando para n8n...', { 
      action: payload.action,
      sessionId: payload.sessionId,
      timeout: CONFIG.TIMEOUT
    });
    
    const response = await fetch(CONFIG.CHAT_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${CONFIG.JWT_TOKEN}`,
      },
      body: JSON.stringify(payload),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    // üéØ CAPTURAR DETALHES DO ERRO 500
    if (!response.ok) {
      let errorDetails = '';
      
      try {
        const errorText = await response.text();
        errorDetails = errorText.substring(0, 500); // Limitar tamanho
        console.error('üîß Detalhes do erro n8n:', errorDetails);
      } catch (textError) {
        errorDetails = 'N√£o foi poss√≠vel ler resposta de erro';
      }
      
      throw new Error(`n8n retornou HTTP ${response.status}: ${response.statusText}. Detalhes: ${errorDetails}`);
    }

    return response;

  } catch (error) {
    clearTimeout(timeoutId);
    
    // üéØ TRATAMENTO ESPEC√çFICO PARA ABORT ERROR
    if (error instanceof DOMException && error.name === 'AbortError') {
      console.error('‚è∞ Requisi√ß√£o abortada por timeout:', CONFIG.TIMEOUT);
      throw new Error(`n8n n√£o respondeu dentro do tempo limite (${CONFIG.TIMEOUT}ms)`);
    }
    
    // üîó TRATAMENTO PARA ERROS DE REDE
    if (error instanceof TypeError && error.message.includes('fetch')) {
      console.error('üåê Erro de conex√£o:', error);
      throw new Error('N√£o foi poss√≠vel conectar ao n8n - verifique a conex√£o de rede');
    }
    
    throw error;
  }
};

/**
 * üîÑ REQUISI√á√ÉO COM RETRY INTELIGENTE PARA QUOTA LIMITS
 */
const makeSecureRequestWithRetry = async (
  payload: WebhookPayload, 
  attempt = 1
): Promise<Response> => {
  try {
    return await makeSecureRequest(payload);
  } catch (error) {
    // üéØ DETECTAR ERRO DE QUOTA EXCEDIDA
    const isQuotaError = error instanceof Error && 
      (error.message.includes('quota') || 
       error.message.includes('rate limit') ||
       error.message.includes('429') ||
       error.message.includes('too many requests'));

    // üéØ DETECTAR ERROS TEMPOR√ÅRIOS
    const isTemporaryError = error instanceof Error && 
      (error.message.includes('timeout') || 
       error.message.includes('conex√£o') ||
       error.message.includes('rede'));

    // üéØ DETECTAR ERRO DE SCHEMA
    const isSchemaError = error instanceof Error && 
      (error.message.includes('tool input') || 
       error.message.includes('schema') ||
       error.message.includes('did not match'));

    // ‚è∞ BACKOFF EXPONENCIAL PARA QUOTA ERRORS
    if (isQuotaError && attempt < CONFIG.RETRY_ATTEMPTS) {
      const backoffTime = Math.min(1000 * Math.pow(2, attempt), CONFIG.MAX_RETRY_DELAY);
      console.log(`üîÑ Quota excedida - Retry ${attempt} em ${backoffTime}ms`);
      await new Promise(resolve => setTimeout(resolve, backoffTime));
      return makeSecureRequestWithRetry(payload, attempt + 1);
    }

    // üîÑ RETRY PARA ERROS TEMPOR√ÅRIOS
    if (isTemporaryError && attempt < CONFIG.RETRY_ATTEMPTS) {
      console.log(`üîÑ Tentativa ${attempt + 1} de ${CONFIG.RETRY_ATTEMPTS}`);
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      return makeSecureRequestWithRetry(payload, attempt + 1);
    }

    // üîß TENTAR PAYLOAD SIMPLIFICADO PARA ERROS DE SCHEMA
    if (isSchemaError && attempt === 1) {
      console.log('üîÑ Tentando com payload simplificado...');
      const minimalPayload = createMinimalPayload(payload.chatInput, payload.sessionId);
      return makeSecureRequestWithRetry(minimalPayload, attempt + 1);
    }
    
    throw error;
  }
};

/**
 * üìã PARSE DA RESPOSTA n8n
 */
const parseN8nResponse = async (response: Response): Promise<string> => {
  const responseText = await response.text();
  
  console.log('üì® Resposta do n8n:', {
    tamanho: responseText.length,
    preview: responseText.substring(0, 200),
    isJson: isJsonString(responseText)
  });

  // ‚úÖ VALIDA√á√ÉO ESTRITA - EXIGIR JSON V√ÅLIDO
  if (!responseText.trim()) {
    throw new Error('n8n retornou resposta vazia');
  }

  if (!isJsonString(responseText)) {
    throw new Error('n8n n√£o retornou JSON v√°lido. Verifique a configura√ß√£o do workflow.');
  }

  try {
    const data: ApiResponse = JSON.parse(responseText);
    
    // ‚úÖ PROPAGAR ERROS DO n8n
    if (data.error) {
      throw new Error(`n8n: ${data.error}`);
    }

    if (!data.success && !data.output && !data.response && !data.message) {
      throw new Error('n8n retornou estrutura JSON inv√°lida');
    }

    // ‚úÖ RETORNAR RESPOSTAS DO n8n
    if (data.output) return data.output;
    if (data.response) return data.response;
    if (data.message) return data.message;
    
    if (data.usuarios_processados !== undefined) {
      return `‚úÖ Processados ${data.usuarios_processados} usu√°rios`;
    }
    
    if (data.usuarios_criados !== undefined) {
      return `‚úÖ Criados ${data.usuarios_criados} usu√°rios`;
    }
    
    if (data.success) return '‚úÖ Processamento conclu√≠do';
    
    throw new Error('n8n retornou resposta sem dados process√°veis');

  } catch (error) {
    console.error('‚ùå Erro no parse:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('n8n')) {
        throw error;
      }
      throw new Error(`Erro de comunica√ß√£o com n8n: ${error.message}`);
    }
    
    throw new Error('Erro desconhecido na comunica√ß√£o com n8n');
  }
};

/**
 * üîç VALIDAR SE STRING √â JSON V√ÅLIDO
 */
const isJsonString = (str: string): boolean => {
  try {
    JSON.parse(str);
    return true;
  } catch {
    return false;
  }
};

/**
 * üõë TRATAMENTO DE ERROS - VERS√ÉO COMPLETA
 */
const handleDynamicError = (error: any): string => {
  console.error('‚ùå Erro detalhado:', error);

  if (error instanceof Error) {
    // üéØ ERRO DE SCHEMA - TOOL INPUT
    if (error.message.includes('tool input') || error.message.includes('schema') || error.message.includes('did not match')) {
      return `üîß Problema de configura√ß√£o no n8n: Schema das ferramentas n√£o corresponde.\n\nSolu√ß√µes:\n‚Ä¢ Verifique os "Tools" no agente LangChain\n‚Ä¢ Valide os schemas de input\n‚Ä¢ Teste com payload simplificado`;
    }
    
    // üéØ ERRO 500 - PROBLEMA INTERNO DO n8n
    if (error.message.includes('HTTP 500')) {
      return `üîß Erro interno no n8n (500). Verifique:\n\n‚Ä¢ ‚úÖ Workflow est√° ativado?\n‚Ä¢ ‚úÖ Credenciais da API configuradas?\n‚Ä¢ ‚úÖ Modelo LLM dispon√≠vel?\n‚Ä¢ ‚úÖ Logs do n8n para detalhes`;
    }
    
    // üéØ ERRO DE QUOTA EXCEDIDA
    if (error.message.includes('quota') || error.message.includes('rate limit') || error.message.includes('429') || error.message.includes('too many requests')) {
      return `üìä Cota da API excedida. Aguarde alguns minutos ou altere para outro modelo no n8n.`;
    }
    
    // üéØ ERROS DE TIMEOUT
    if (error.name === 'AbortError' || error.message.includes('timeout')) {
      return `‚è∞ n8n n√£o respondeu ap√≥s ${CONFIG.TIMEOUT}ms. Tente novamente.`;
    }
    
    // üåê ERROS DE CONEX√ÉO
    if (error.message.includes('Failed to fetch') || error.message.includes('conex√£o') || error.message.includes('rede')) {
      return 'üåê N√£o foi poss√≠vel conectar ao n8n. Verifique sua conex√£o de rede.';
    }
    
    // üìã ERROS DE JSON
    if (error.message.includes('JSON') || error.message.includes('parse')) {
      return 'üîß n8n configurado incorretamente - deve retornar JSON v√°lido';
    }
    
    // üîß ERROS DO n8n
    if (error.message.includes('n8n')) {
      return `üîß ${error.message}`;
    }
    
    return `‚ùå ${error.message}`;
  }

  return `‚ùå Erro inesperado: ${String(error)}`;
};

// ==================== SERVI√áOS ADICIONAIS ====================

/**
 * üß™ TESTE DE SCHEMA DO n8n
 */
export const testN8nSchema = async (): Promise<string> => {
  const testPayloads = [
    // Payload m√≠nimo
    {
      sessionId: "test-schema",
      chatInput: "hello",
      action: "test",
      timestamp: new Date().toISOString(),
      token: "test-token"
    },
    // Payload com dados extras
    {
      sessionId: "test-schema-2", 
      chatInput: "test message",
      action: "chat",
      timestamp: new Date().toISOString(),
      token: "test-token-2",
      additionalData: "should be ignored if not in schema"
    }
  ];

  for (const payload of testPayloads) {
    try {
      console.log('üß™ Testando payload:', JSON.stringify(payload));
      const response = await makeSecureRequest(payload as WebhookPayload);
      const result = await response.text();
      console.log('‚úÖ Payload funcionou:', payload.action);
      return `‚úÖ Schema testado com sucesso: ${payload.action}`;
    } catch (error) {
      console.log('‚ùå Payload falhou:', payload.action, error);
    }
  }

  return '‚ùå Todos os testes de schema falharam';
};

export const testConnection = async (): Promise<{ 
  status: 'success' | 'error';
  message: string;
  timestamp: string;
}> => {
  try {
    await validateN8nResponse();
    
    return {
      status: 'success',
      message: '‚úÖ Conex√£o com n8n estabelecida!',
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    return {
      status: 'error', 
      message: `‚ùå Falha na conex√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
      timestamp: new Date().toISOString()
    };
  }
};

export const getServiceConfig = () => {
  return {
    version: '11.0.0',
    description: 'Vers√£o completa e corrigida com tratamento de schema',
    capabilities: [
      'üîó Conex√£o direta com n8n',
      'üîë Detec√ß√£o autom√°tica de token',
      'üè¢ Detec√ß√£o de sele√ß√£o de empresa', 
      'üë§ Processamento de dados de usu√°rios',
      'üìä Processamento de planilhas',
      'üí¨ Mensagens gen√©ricas',
      'üîç Valida√ß√£o estrita de JSON',
      'üîÑ Sistema de retry inteligente',
      'üéØ Tratamento de erros de schema',
      'üìä Monitoramento de quota',
      'üß™ Teste de schema autom√°tico'
    ]
  };
};

// ==================== COMPATIBILIDADE ====================

export const processCSVFile = processPlanilha;
export const testOnbotConnection = testConnection;

// ==================== INICIALIZA√á√ÉO ====================

console.log(`
üöÄ Onbot Service 11.0.0 - VERS√ÉO COMPLETA E CORRIGIDA

üéØ CAPACIDADES:
üîó Conex√£o direta com n8n
üîë Detec√ß√£o autom√°tica de token
üè¢ Detec√ß√£o de sele√ß√£o de empresa
üë§ Processamento de dados de usu√°rios  
üìä Processamento de planilhas
üí¨ Mensagens gen√©ricas
üîç Valida√ß√£o estrita de JSON
üîÑ Sistema de retry inteligente
üéØ Tratamento de erros de schema
üìä Monitoramento de quota
üß™ Teste de schema autom√°tico

üìç URL: ${CONFIG.CHAT_WEBHOOK_URL}
‚è∞ Timeout: ${CONFIG.TIMEOUT}ms
üîÑ Retry: ${CONFIG.RETRY_ATTEMPTS} tentativas
‚úÖ Pronto para processamento direto!
`);

// Exporta√ß√µes
export { generateSessionId as SessionManager };
export type { WebhookPayload, ApiResponse };