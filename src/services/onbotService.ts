// src/services/onbotService.ts - VERS√ÉO CORRIGIDA COM SUAS VARI√ÅVEIS

// ‚úÖ Use a URL do webhook n8n que voc√™ j√° tem configurada
const ONBOT_API_URL = import.meta.env.VITE_N8N_WEBHOOK_URL || 'https://consentient-bridger-pyroclastic.ngrok-free.dev/webhook/bc410b9e-0c7e-4625-b4aa-06f42b413ddc/chat';

// ‚úÖ Token JWT para autentica√ß√£o
const JWT_TOKEN = import.meta.env.VITE_JWT_TOKEN || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZGV2LXVzZXItMTIzIiwiYXVkIjoiYm9sdC1mcm9udGVuZCIsImlzcyI6ImRldi1iYWNrZW5kIiwiaWF0IjoxNzM5NDYyNDAwLCJleHAiOjE3Mzk0NjUwMDB9.4xw4gVv7J8Q6Y9tLm6wZ8XrNp1qKjT3vB2cD7fE5hM';

interface OnbotResponse {
  success: boolean;
  message: string;
  data?: any;
}

interface ConnectionTestResult {
  status: 'success' | 'error';
  message: string;
}

/**
 * Testa a conex√£o com o servi√ßo OnBot
 */
export const testOnbotConnection = async (): Promise<ConnectionTestResult> => {
  try {
    console.log('üîó Testando conex√£o com:', ONBOT_API_URL);
    
    const response = await fetch(ONBOT_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${JWT_TOKEN}`,
      },
      body: JSON.stringify({
        action: 'health_check',
        sessionId: 'health_check_' + Date.now()
      }),
    });

    if (response.ok) {
      return {
        status: 'success',
        message: 'Conex√£o estabelecida com sucesso'
      };
    } else {
      console.warn('‚ö†Ô∏è Servi√ßo respondeu com status:', response.status);
      return {
        status: 'error', 
        message: 'Servi√ßo temporariamente indispon√≠vel'
      };
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o:', error);
    return {
      status: 'error',
      message: 'Servi√ßo n√£o dispon√≠vel - Verifique a conex√£o'
    };
  }
};

/**
 * Envia mensagem para o OnBot AI via webhook n8n
 */
export const sendMessageToOnbot = async (
  message: string, 
  sessionId: string, 
  file?: File
): Promise<string> => {
  try {
    console.log('üöÄ Enviando para webhook n8n:', ONBOT_API_URL);
    
    const formData = new FormData();
    formData.append('message', message);
    formData.append('sessionId', sessionId);
    formData.append('action', 'chat_message');
    
    if (file) {
      console.log('üìé Anexando arquivo:', file.name, file.type);
      formData.append('file', file);
    }

    const response = await fetch(ONBOT_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
      },
      body: formData,
    });

    console.log('üì® Resposta recebida - Status:', response.status);

    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Dados recebidos:', data);
    
    if (data.success) {
      return data.message || data.response || 'Mensagem processada com sucesso!';
    } else {
      throw new Error(data.message || data.error || 'Erro ao processar mensagem');
    }
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem para OnBot:', error);
    
    // ‚úÖ Mensagem amig√°vel baseada no tipo de erro
    if (error instanceof Error) {
      if (error.message.includes('Failed to fetch') || error.message.includes('net::ERR')) {
        return 'üåê **Erro de Conex√£o**\n\nN√£o foi poss√≠vel conectar ao servi√ßo OnBot AI.\n\nüîç **Verifique:**\n- Sua conex√£o com a internet\n- Se o webhook n8n est√° online\n- A URL do webhook nas configura√ß√µes\n\nüí° **Enquanto isso:** Voc√™ pode enviar arquivos CSV diretamente pelo formul√°rio principal.';
      } else if (error.message.includes('404')) {
        return 'üîç **Webhook N√£o Encontrado**\n\nO endpoint do OnBot AI n√£o foi encontrado.\n\n‚öôÔ∏è **Solu√ß√£o:**\n- Verifique se a URL do webhook n8n est√° correta\n- Confirme se o webhook est√° ativo no n8n\n- Teste o webhook diretamente\n\nüìÅ **Alternativa:** Use o upload de CSV tradicional.';
      } else if (error.message.includes('401') || error.message.includes('403')) {
        return 'üîê **Erro de Autentica√ß√£o**\n\nToken de acesso inv√°lido ou expirado.\n\nüîë **Solu√ß√£o:**\n- Verifique se o token JWT est√° correto\n- Renove o token se necess√°rio\n- Confirme as permiss√µes de acesso\n\nüí° Voc√™ ainda pode usar o sistema de upload CSV.';
      }
    }
    
    return 'ü§ñ **OnBot AI - Em Configura√ß√£o**\n\nEstamos ajustando a conex√£o com o servi√ßo AI.\n\nüìã **Funcionalidades Dispon√≠veis:**\n- Upload de arquivos CSV pelo formul√°rio\n- Cria√ß√£o de usu√°rios com token\n- Interface de chat demonstrativa\n\nüîß **Status:** Backend em implanta√ß√£o\n‚è≥ **Previs√£o:** Em breve totalmente operacional!\n\nüí° **Dica:** Envie seus CSVs pelo bot√£o de anexo para testar.';
  }
};

/**
 * Processa arquivo CSV via webhook n8n
 */
export const processCSVFile = async (file: File, token: string): Promise<OnbotResponse> => {
  try {
    const formData = new FormData();
    formData.append('csvFile', file);
    formData.append('token', token);
    formData.append('action', 'process_csv');

    const response = await fetch(ONBOT_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
      },
      body: formData,
    });

    const data = await response.json();
    
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao processar arquivo CSV:', error);
    return {
      success: false,
      message: 'Erro ao processar arquivo CSV - Tente novamente'
    };
  }
};